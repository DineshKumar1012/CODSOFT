# Representing the Tic-Tac-Toe board
class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # Represents a 3x3 board
        self.current_winner = None

    def print_board(self):
        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.check_winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def check_winner(self, square, letter):
        # Check rows
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True

        # Check columns
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True

        # Check diagonals
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all([spot == letter for spot in diagonal2]):
                return True

        return False


def play(game, x_player, o_player, print_game=True):
    if print_game:
        game.print_board()
    
    letter = 'X'
    
    while not game.current_winner:
        if letter == 'X':
            square = x_player.get_move(game)
        else:
            square = o_player.get_move(game)
        
        if game.make_move(square, letter):
            if print_game:
                print(f"{letter} makes a move to square {square}")
                game.print_board()
                print("")
            
            if game.current_winner:
                if print_game:
                    print(f"{letter} wins!")
                return letter
            
            letter = 'O' if letter == 'X' else 'X'
            
    if print_game:
        print("It's a tie!")

class HumanPlayer:
    def get_move(self, game):
        valid_square = False
        val = None
        while not valid_square:
            square = input("Make your move (0-8): ")
            try:
                val = int(square)
                if val not in game.available_moves():
                    raise ValueError
                valid_square = True
            except ValueError:
                print("Invalid move. Try again.")
        return val

class AIPlayer:
    def __init__(self, letter):
        self.letter = letter

    def get_move(self, game):
        if self.letter == 'X':
            opponent_letter = 'O'
        else:
            opponent_letter = 'X'
        
        # AI logic goes here (Minimax algorithm)
        # ... (to be implemented)
        # For simplicity, let's make a random move as a placeholder
        import random
        possible_moves = game.available_moves()
        return random.choice(possible_moves)

# Example usage
if __name__ == '__main__':
    game = TicTacToe()
    x_player = HumanPlayer()
    o_player = AIPlayer('O')
    play(game, x_player, o_player, print_game=True)
